struct Foo 
{
    Foo(float a) : _a(a) {}
    float get() { return _a; }
    float _a;
};

class SumFoo {
    float* my_a;
public:
    float my_sum;
    void operator()(const tbb::blocked_range<size_t>& r) {
        float *a = my_a;
        float sum = my_sum;
        size_t end = r.end();
        for (size_t i = r.begin(); i != end; ++i)
            sum += Foo(a[i]).get();
        my_sum = sum;
    }


    SumFoo(SumFoo& x, tbb::split) : my_a(x.my_a), my_sum(0) {}

    void join(const SumFoo& y) { my_sum += y.my_sum; }

    SumFoo(float* a) :
        my_a(a), my_sum(0)
    {}
};

float ParallelSumFoo(float* a, size_t n) {
    SumFoo sf(a);
    tbb::parallel_reduce(tbb::blocked_range<size_t>(0, n), sf);
    return sf.my_sum;
}